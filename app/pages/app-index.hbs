{{!-- Dashboard Theme --}}
<link rel="stylesheet" type="text/css" href="/assets/css/_remake.css">
<link rel="stylesheet" type="text/css" href="/assets/css/main.css">
<link rel="stylesheet" type="text/css" href="/assets/css/timer.css">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<p></p>
<h1>Hi {{currentUser.details.username}}, welcome to your Personal Dashboard!</h1>

<div class="themes">
    <div object key:dashboard-theme="@search">
      <h2 target:dashboard-theme="@innerText" id="current-theme">{{default dashboardTheme "light mode"}}</h2>
      <button update:dashboard-theme="light mode" id="light-mode">light mode</button>
      <button update:dashboard-theme="dark mode">dark mode</button>
      <button update:dashboard-theme="fun mode">fun mode</button>
    <script>
      const startingTheme = document.querySelector("#current-theme");
      document.querySelector("html").setAttribute("dashboard-theme", startingTheme.innerText);
      const myButtons = document.querySelectorAll("div > button");
      for(let i = 0; i < myButtons.length; i++) {
        myButtons[i].addEventListener("click", function(){
          const newTheme = this.innerText;
          console.log(this.innerText);
          document.querySelector("html").setAttribute("dashboard-theme", newTheme);
        })
      }

    </script>
  </div>
</div>

<div class="dashboard-container">

  <div class="timer-container">

      <div>Get some sh*t done. Set a timer!</div>

      <div class="display-time">
        <span id="display-hours">00</span>:
        <span id="display-minutes">00</span>:
        <span id="display-seconds">00</span>
      </div>
      <div class="time-controls">
        <div class="time-unit hours">
        <span>Hrs:</span>
        <button onclick="adjustTime('hours', 1)">+</button>
        <span id="hours">00</span>
        <button onclick="adjustTime('hours', -1)">-</button>
      </div>
      <div class="time-unit minutes">
        <span>Min:</span>
        <button onclick="adjustTime('minutes',1)">+</button>
        <span id="minutes">00</span>
        <button onclick="adjustTime('minutes', -1)">-</button>
      </div>
      <div class="time-unit seconds">
        <span>Sec:</span>
        <button onclick="adjustTime('seconds', 1)">+</button>
        <span id="seconds">00</span>
        <button onclick="adjustTime('seconds', -1)">-</button>
      </div>
      </div>

      <div id="timer-btns">
      <button onclick="startTimer()" class="timer-buttons">Start</button>
      <button onclick="pauseResume()" class="timer-buttons" id="pause-btn">Pause</button>
      <button onclick="resetTimer()" class="timer-buttons">Reset</button>
      </div>

    </div>
    </div>

    <button class="list__add-list" new:list><span class="material-icons">format_list_bulleted_add</span></button>
    <div class="dashboard" array key="def-lists" sortable="def-lists">
      
      {{#for list in lists}}
        <div 
          class="list" object key:list-heading="@search" default:list-heading="List"
        >
          <div class="list__top">
            <h3 
              class="list__text"
              target:list-heading="@innerText" edit:list-heading>{{default list.listHeading "New List"}}
              </h3>
          </div>
          <div class="list__add-item-container">
            <button class="list__add-item" new:item><span class="material-icons">add</span></button>
          </div>
          <div 
            class="list__items"
            key="items"
            array
            sortable="items"
          >
            {{#for item in list.items}}
              <div 
                class="item" object key:item-text="@search" edit:item-text
              >
                <input type="checkbox" disable-events onchange="thisTHING(event)">
                <p 
                  class="item__text"
                  target:item-text="@innerText">{{default item.itemText "new list item"}}
                  </p>
              </div>
            {{/for}}
          </div>
        </div>
      {{/for}}
    </div>
  </div>
  <script>

    // Timer Stuff
    let timerInterval;
    let timeLeft;
    let isPaused = false;
    let timerStarted = false;

    function adjustTime(unit, value) {
      let element = document.getElementById(unit);
      let currentVal = parseInt(element.innerText);
      let newVal = currentVal + value;

      if (unit === "hours" && (newVal < 0 || newVal > 14))  return;
      if (unit === "minutes" && (newVal < 0 || newVal > 59))  return;
      if (unit === "seconds" && (newVal < 0 || newVal > 59))  return;

      element.innerText = newVal.toString().padStart(2, "0");
    }

    function startTimer() {
        clearInterval(timerInterval); // Clear any existing intervals
        
        let hours = parseInt(document.getElementById("hours").innerText);
        let minutes = parseInt(document.getElementById("minutes").innerText);
        let seconds = parseInt(document.getElementById("seconds").innerText);
        
        timeLeft = hours * 3600 + minutes * 60 + seconds;
        displayTime();

        timerInterval = setInterval(() => {
            timeLeft -= 1;
            displayTime();
            
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                alert("Time's up!");
            }
        }, 1000);
    }

    function displayTime() {
      let currHour = Math.floor(timeLeft/3600);
      let currMin = Math.floor((timeLeft - currHour * 3600) / 60);
      let currSec = timeLeft % 60;

      document.getElementById("display-hours").innerText = currHour.toString().padStart(2,"0");
      
      document.getElementById("display-minutes").innerText = currMin.toString().padStart(2,"0");
      
      document.getElementById("display-seconds").innerText = currSec.toString().padStart(2,"0");
    }
    
    function pauseResume() {
        if (isPaused) {
            resumeTimer();
        } else {
            pauseTimer();
        }
    }



    function pauseTimer() {
        clearInterval(timerInterval);
        document.getElementById("pause-btn").innerText = "Resume";
        isPaused = true;
    }


    function resumeTimer() {
        if (isPaused) {
            timerInterval = setInterval(() => {
                timeLeft -= 1;
                displayTime();

                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    alert("Time's up!");
                }
            }, 1000);
            document.getElementById("pause-btn").innerText = "Pause";
            isPaused = false;
        }
    }


    function resetTimer() {
      pauseTimer();
      timerStarted = false;
      document.getElementById("hours").innerText="00";
      document.getElementById("minutes").innerText="00";
      document.getElementById("seconds").innerText="00";
      displayTime();
    }


    function thisTHING(event) {
      const myText = event.target.nextElementSibling;
      if(event.target.checked) {
        myText.style.backgroundSize = "100% 100%";
      }
      else {
        myText.style.backgroundSize = "0% 100%";
      }
    }
  </script>
</div>