{{!-- Dashboard Theme --}}
<link rel="stylesheet" type="text/css" href="/assets/css/_remake.css">
<link rel="stylesheet" type="text/css" href="/assets/css/main.css">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<p></p>
<h1>Welcome to your Personal Dashboard!</h1>

<button class="list__add-list" new:list><span class="material-icons">format_list_bulleted_add</span></button>
     <div object key:dashboard-theme="@search">
    <h2 target:dashboard-theme="@innerText" id="current-theme">{{default dashboardTheme "light mode"}}</h2>
    <button update:dashboard-theme="light mode" id="light-mode">light mode</button>
    <button update:dashboard-theme="dark mode">dark mode</button>
    <button update:dashboard-theme="fun mode">fun mode</button>
    <script>
      const startingTheme = document.querySelector("#current-theme");
      document.querySelector("html").setAttribute("dashboard-theme", startingTheme.innerText);
      const myButtons = document.querySelectorAll("div > button");
      for(let i = 0; i < myButtons.length; i++) {
        myButtons[i].addEventListener("click", function(){
          const newTheme = this.innerText;
          console.log(this.innerText);
          document.querySelector("html").setAttribute("dashboard-theme", newTheme);
        })
      }

    </script>
  </div>
<div class="dashboard-container">
  <div class="dashboard" array key="lists" sortable="lists">
    {{#for list in lists}}
      <div 
        class="list" object key:list-heading="@search" default:list-heading="List"
      >
        <div class="list__top">
          <h3 
            class="list__text"
            target:list-heading="@innerText" edit:list-heading>{{default list.listHeading "New List"}}
            </h3>
        </div>
        <div 
          class="list__items"
          key="items"
          array
          sortable="items"
        >
          {{#for item in list.items}}
            <div 
              class="item" object key:item-text="@search" edit:item-text
            >
              <input type="checkbox" disable-events onchange="thisTHING(event)">
              <p 
                class="item__text"
                target:item-text="@innerText">{{default item.itemText "new list item"}}
                </p>
              
                
            </div>
          {{/for}}
        </div>
        <div class="list__add-item-container">
          <button class="list__add-item" new:item><span class="material-icons">add</span></button>
        </div>
      </div>
    {{/for}}
  </div>
    
    <div class="timer-container">
      <div class="display-time">
        <span id="display-hours">00</span>:
        <span id="display-minutes>">00</span>:
        <span id="display-seconds">00</span>
      </div>
      <div class="time-unit hours">
        <span>Hours</span>
        <button onclick="adjustTime('hours', 1)">+</button>
        <span id="hours">00</span>
        <button onclick="adjustTime('hours', -1)">-</button>
      </div>
      <div class="time-unit minutes">
        <span>Minutes</span>
        <button onclick="adjustTime('minutes',1)">+</button>
        <span id="minutes">00</span>
        <button onclick="adjustTime('minutes', -1)">-</button>
      </div>
      <div class="time-unit seconds">
        <span>Seconds</span>
        <button onclick="adjustTime('seconds', 1)">+</button>
        <span id="seconds">00</span>
        <button onclick="adjustTime('seconds', -1)">-</button>
      </div>
      <button>Start</button>
      <button>Pause</button>
      <button>Reset</button>
    </div>
  </div>
  <script>

    // Timer Stuff
    let timerInterval;
    let timeLeft;

    function adjustTime(unit, value) {
      let element = document.getElementById(unit);
      let currentVal = parseInt(element.innerText);
      let newVal = currentVal + value;

      if (unit === "hours" && (newVal < 0 || newVal > 14))  return;
      if (unit === "minutes" && (newVal < 0 || newVal > 59))  return;
      if (unit === "seconds" && (newVal < 0 || newVal > 59))  return;

      element.innerText = newVal.toString().padStart(2, "0");
    }

    function startTimer() {
      pauseTimer();
      let hours = parseInt(document.getElementById("hours").innerText);
      let minutes = parseInt(document.getElementById("minutes").innerText);
      let seconds = parseInt(document.getElementById("seconds").innerText);
      timeLeft = hours * 60 * 60 + minutes * 60 + seconds;

      //Call Update display time function here

      

    }

    function pauseTimer() {
      console.log(`before clearInterval() ${timerInterval}`);
      clearInterval(timerInterval);
      console.log(`after clearInterval() ${timerInterval}`);
    }

    function resetTimer() {
      pauseTimer();
      document.getElementById("hours").innerText="00";
      document.getElementById("minutes").innerText="00";
      document.getElementById("seconds").innerText="00";
    }
    function thisTHING(event) {
      const myText = event.target.nextElementSibling;
      if(event.target.checked) {
        myText.style.backgroundSize = "100% 100%";
      }
      else {
        myText.style.backgroundSize = "0% 100%";
      }
      
      
    }
  </script>
</div>